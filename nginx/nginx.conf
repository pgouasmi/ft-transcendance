user  nginx;
worker_processes  1;

events {
    worker_connections 1024;
}

http {
    # Format de log détaillé
    log_format detailed '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';

    # Log des accès
    access_log /var/log/nginx/access.log detailed;
    # Log des erreurs avec niveau debug pour plus de détails
    error_log /var/log/nginx/error.log debug;

    resolver 127.0.0.11 valid=30s;

    map $http_origin $cors_origin {
        default "";
        "https://localhost:5173" $http_origin;
        "~^https?://192\.168\.\d+\.\d+:5173$" $http_origin;
        "~^https?://10\.\d+\.\d+\.\d+:5173$" $http_origin;
    }

    # Ajout des configurations de base manquantes
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    
    limit_req_zone $binary_remote_addr zone=ddos_protection:10m rate=10r/s;
    
    server {
        access_log /var/log/nginx/server_access.log detailed;
        error_log /var/log/nginx/server_error.log debug;

        listen 7777 ssl;
        server_name _;

        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;

        # Configuration CORS unique et simplifiée
        add_header 'Access-Control-Allow-Origin' $cors_origin always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-CSRFToken' always;

        # Gestion des requêtes OPTIONS
        if ($request_method = 'OPTIONS') {
            # add_header 'Access-Control-Max-Age' 1728000;
            return 204;
        }


        location /health {
            access_log off;
            add_header Content-Type text/plain;
            return 200 'healthy\n';
        }


        # Routes matchmaking
        location /game/create/ {
            limit_req zone=ddos_protection burst=20 nodelay;

            proxy_pass https://matchmaking:8001/game/create/;
            proxy_ssl_verify off;  # Pour les certificats auto-signés
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /game/join/ {
            limit_req zone=ddos_protection burst=20 nodelay;

            proxy_pass https://matchmaking:8001/game/join/;
            proxy_ssl_verify off;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location ~ ^/game/verify/([a-zA-Z0-9-]+)/$ {
            limit_req zone=ddos_protection burst=20 nodelay;

            proxy_pass https://matchmaking:8001/game/verify/$1/;
            proxy_ssl_verify off;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location ~ /ws/pong/([a-zA-Z0-9-]+)/ {

            set $upstream_server server:8000;
            proxy_pass https://$upstream_server/ws/pong/$1/;
            proxy_ssl_verify off;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /game/tournament/ {
            limit_req zone=ddos_protection burst=20 nodelay;

            proxy_pass https://matchmaking:8001/game/tournament/;
            proxy_ssl_verify off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /auth/ {
            limit_req zone=ddos_protection burst=20 nodelay;

            proxy_pass https://auth:8080/auth/;
            proxy_ssl_verify off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location ~ ^/game/cleanup/([a-zA-Z0-9-]+)/$ {
            proxy_pass https://matchmaking:8001/game/cleanup/$1/;
            proxy_ssl_verify off;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
